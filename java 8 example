. Consumer<T>
Description: Represents an operation that accepts a single input argument and returns no result. It is typically used for operations that have side effects, such as modifying an object or printing output.
Method: void accept(T t)
Example Usage:
java
Copy code
import java.util.function.Consumer;

public class ConsumerExample {
    public static void main(String[] args) {
        Consumer<String> printConsumer = message -> System.out.println(message);
        printConsumer.accept("Hello, World!");  // Output: Hello, World!
    }
}
Predicate<T>
Description: Represents a boolean-valued function of one argument. It is often used for filtering or matching operations.
Method: boolean test(T t)
Example Usage:
java
Copy code
import java.util.function.Predicate;

public class PredicateExample {
    public static void main(String[] args) {
        Predicate<Integer> isEven = num -> num % 2 == 0;
        System.out.println(isEven.test(4));  // Output: true
        System.out.println(isEven.test(7));  // Output: false
    }
}

Function<T, R>
Description: Represents a function that takes one argument and produces a result. It is used when you want to transform or map one type to another.
Method: R apply(T t)
Example Usage:
java
Copy code
import java.util.function.Function;

public class FunctionExample {
    public static void main(String[] args) {
        Function<Integer, String> intToString = num -> "Number: " + num;
        System.out.println(intToString.apply(5));  // Output: Number: 5
    }
}

Supplier<T>
Description: Represents a supplier of results. It takes no input and returns a result. It is typically used for generating values on demand, such as in factory methods.
Method: T get()
Example Usage:
java
Copy code
import java.util.function.Supplier;

public class SupplierExample {
    public static void main(String[] args) {
        Supplier<Double> randomValueSupplier = () -> Math.random();
        System.out.println(randomValueSupplier.get());  // Output: random number between 0 and 1
    }
}

Types of Method References
Reference to a static method
Reference to an instance method of a particular object
Reference to an instance method of an arbitrary object of a particular type
Reference to a constructor
Example 1: Reference to a Static Method
Consider a static method in a class that you want to reference:

java
Copy
import java.util.Arrays;
import java.util.List;

public class MethodReferenceExample {
    
    // Static method to be referenced
    public static void printUpperCase(String str) {
        System.out.println(str.toUpperCase());
    }

    public static void main(String[] args) {
        List<String> list = Arrays.asList("apple", "banana", "cherry");

        // Using method reference to call a static method
        list.forEach(MethodReferenceExample::printUpperCase);
    }
}
Here, MethodReferenceExample::printUpperCase is a method reference to the static method printUpperCase.

Example 2: Reference to an Instance Method of a Particular Object
If you want to reference an instance method of a specific object, here's how you can do it:

java
Copy
import java.util.Arrays;
import java.util.List;

public class MethodReferenceExample {
    
    // Instance method to be referenced
    public void printLowerCase(String str) {
        System.out.println(str.toLowerCase());
    }

    public static void main(String[] args) {
        MethodReferenceExample example = new MethodReferenceExample();
        List<String> list = Arrays.asList("APPLE", "BANANA", "CHERRY");

        // Using method reference to call an instance method of a specific object
        list.forEach(example::printLowerCase);
    }
}
Here, example::printLowerCase is a reference to the instance method printLowerCase of the example object.

Example 3: Reference to an Instance Method of an Arbitrary Object of a Particular Type
In this case, we reference an instance method of an object, but the object is not known in advance. A common use case is for collection manipulation:

java
Copy
import java.util.Arrays;
import java.util.List;

public class MethodReferenceExample {

    // Instance method to be referenced
    public void printLength(String str) {
        System.out.println(str.length());
    }

    public static void main(String[] args) {
        List<String> list = Arrays.asList("apple", "banana", "cherry");

        // Using method reference to call an instance method of any object of the type String
        list.forEach(String::length);  // Here String::length is a method reference
    }
}
Here, String::length is a reference to the instance method length of the String class.

Example 4: Reference to a Constructor
You can also reference constructors in Java, particularly useful when working with collections and functional interfaces:

java
Copy
import java.util.function.Supplier;

public class MethodReferenceExample {
    
    // Constructor to be referenced
    public MethodReferenceExample() {
        System.out.println("Constructor called!");
    }

    public static void main(String[] args) {
        // Using method reference to call a constructor
        Supplier<MethodReferenceExample> supplier = MethodReferenceExample::new;
        supplier.get();  // Calls the constructor
    }
}
