. Consumer<T>
Description: Represents an operation that accepts a single input argument and returns no result. It is typically used for operations that have side effects, such as modifying an object or printing output.
Method: void accept(T t)
Example Usage:
java
Copy code
import java.util.function.Consumer;

public class ConsumerExample {
    public static void main(String[] args) {
        Consumer<String> printConsumer = message -> System.out.println(message);
        printConsumer.accept("Hello, World!");  // Output: Hello, World!
    }
}
Predicate<T>
Description: Represents a boolean-valued function of one argument. It is often used for filtering or matching operations.
Method: boolean test(T t)
Example Usage:
java
Copy code
import java.util.function.Predicate;

public class PredicateExample {
    public static void main(String[] args) {
        Predicate<Integer> isEven = num -> num % 2 == 0;
        System.out.println(isEven.test(4));  // Output: true
        System.out.println(isEven.test(7));  // Output: false
    }
}

Function<T, R>
Description: Represents a function that takes one argument and produces a result. It is used when you want to transform or map one type to another.
Method: R apply(T t)
Example Usage:
java
Copy code
import java.util.function.Function;

public class FunctionExample {
    public static void main(String[] args) {
        Function<Integer, String> intToString = num -> "Number: " + num;
        System.out.println(intToString.apply(5));  // Output: Number: 5
    }
}

Supplier<T>
Description: Represents a supplier of results. It takes no input and returns a result. It is typically used for generating values on demand, such as in factory methods.
Method: T get()
Example Usage:
java
Copy code
import java.util.function.Supplier;

public class SupplierExample {
    public static void main(String[] args) {
        Supplier<Double> randomValueSupplier = () -> Math.random();
        System.out.println(randomValueSupplier.get());  // Output: random number between 0 and 1
    }
}

method Reference:
Method Reference is a shorthand notation of a lambda expression to call a method. It provides a way to refer to a method directly using its name. It makes the code more readable
Types of Method References:
Reference to a Static Method
Description: A method reference to a static method of a class.
Syntax: ClassName::staticMethodName
Example:
import java.util.function.Function;

public class MethodReferenceExample {
    // Static method
    public static String greet(String name) {
        return "Hello, " + name;
    }

    public static void main(String[] args) {
        // Using method reference
        Function<String, String> greetingFunction = MethodReferenceExample::greet;
        System.out.println(greetingFunction.apply("Alice"));  // Output: Hello, Alice
    }
}
Reference to an Instance Method of a Particular Object
Description: A method reference to an instance method of a particular object (not a class).
Syntax: instance::instanceMethodName
Example:
import java.util.function.Consumer;

public class MethodReferenceExample {
    // Instance method
    public void printMessage(String message) {
        System.out.println(message);
    }

    public static void main(String[] args) {
        MethodReferenceExample obj = new MethodReferenceExample();
        // Using method reference to an instance method
        Consumer<String> printer = obj::printMessage;
        printer.accept("Hello, World!");  // Output: Hello, World!
    }
}

Reference to an Instance Method of an Arbitrary Object of a Particular Type
Description: A method reference to an instance method of an arbitrary object of a particular type. It is often used when you donâ€™t have a specific object but want to refer to an instance method.
Syntax: ClassName::instanceMethodName
Example:
import java.util.Arrays;
import java.util.List;

public class MethodReferenceExample {
    // Instance method
    public String transform(String str) {
        return "Transformed: " + str;
    }

    public static void main(String[] args) {
        List<String> words = Arrays.asList("apple", "banana", "cherry");
        // Using method reference to an instance method of an arbitrary object
        words.forEach(new MethodReferenceExample()::transform);
    }
}
Reference to a Constructor
Description: A method reference to a constructor. This allows you to create a new instance of a class using a constructor.
Syntax: ClassName::new
Example:
import java.util.function.Supplier;

public class MethodReferenceExample {
    // Constructor
    public MethodReferenceExample() {
        System.out.println("Constructor called!");
    }

    public static void main(String[] args) {
        // Using method reference to constructor
        Supplier<MethodReferenceExample> supplier = MethodReferenceExample::new;
        supplier.get();  // Output: Constructor called!
    }
}
